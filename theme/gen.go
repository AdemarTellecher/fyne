//go:build ignore

package main

import (
	"bytes"
	"fmt"
	"go/format"
	"io"
	"os"
	"os/exec"
	"path/filepath"
	"strings"

	"fyne.io/fyne/v2"
)

const fontFace = "NotoSans"

const fileHeader = "// auto-generated\n" + // to exclude this file in goreportcard (it has to be first)
	"// Code generated by '$ fyne bundle'. DO NOT EDIT." // idiomatic mark, see https://golang.org/s/generatedcode

func main() {
	symbolFont := "InterSymbols-Regular.ttf"
	err := createFontByStripping(symbolFont, "Inter-Regular.ttf", []rune{
		'←',
		'↑',
		'→',
		'↓',
		'↖',
		'↘',
		'↩',
		'↪',
		'↳',
		'↵',
		'⇞',
		'⇟',
		'⇤',
		'⇥',
		'⇧',
		'⌃',
		'⌘',
		'⌥',
		'⌦',
		'⌫',
		'⎋',
		'␣',
		'❖',
	})
	if err != nil {
		fyne.LogError("symbol font creation failed", err)
		os.Exit(1)
	}
	fmt.Println("Symbol font created successfully.")

	fmt.Println("Bundle fonts…")
	f := &bytes.Buffer{}
	f.WriteString(fileHeader + "\n\npackage theme\n\nimport \"fyne.io/fyne/v2\"\n\n")
	bundleFont(symbolFont, "symbol", f)

	err = writeFile("bundled-symbol-font.go", f.Bytes())
	if err != nil {
		fyne.LogError("unable to write file", err)
		os.Exit(1)
	}
}

func bundleFile(name string, filepath string, f io.Writer) {
	res, err := fyne.LoadResourceFromPath(filepath)
	if err != nil {
		fyne.LogError("Unable to load file "+filepath, err)
		return
	}
	staticRes, ok := res.(*fyne.StaticResource)
	if !ok {
		fyne.LogError("Unable to format resource", fmt.Errorf("unexpected resource type %T", res))
		return
	}
	_, err = fmt.Fprintf(f, "var %s = &fyne.StaticResource{\n\tStaticName: %q,\n\tStaticContent: []byte(%q),\n}\n\n",
		formatVariable(name), staticRes.StaticName, staticRes.StaticContent)
	if err != nil {
		fyne.LogError("Unable to write to bundled file", err)
	}
}

func bundleFont(fontFile, varName string, f io.Writer) {
	path := fontPath(fontFile)
	bundleFile(varName, path, f)
}

func createFontByStripping(newFontFile, fontFile string, runes []rune) error {
	unicodes := make([]string, len(runes))
	for _, r := range runes {
		unicodes = append(unicodes, fmt.Sprintf(`%04X`, r))
	}
	cmd := exec.Command(
		"pyftsubset",
		fontPath(fontFile),
		"--output-file="+fontPath(newFontFile),
		"--unicodes="+strings.Join(unicodes, ","),
	)
	fmt.Println("creating font by executing:", cmd.String())
	output, err := cmd.CombinedOutput()
	if len(output) > 0 {
		fmt.Println("output:")
		fmt.Println(string(output))
	}
	return err
}

func fontPath(filename string) string {
	dirname, _ := os.Getwd()
	return filepath.Join(dirname, "font", filename)
}

func formatVariable(name string) string {
	str := strings.Replace(name, "-", "", -1)
	return strings.Replace(str, "_", "", -1)
}

func writeFile(filename string, contents []byte) error {
	formatted, err := format.Source(contents)
	if err != nil {
		return err
	}
	dirname, _ := os.Getwd()
	return os.WriteFile(filepath.Join(dirname, filename), formatted, 0644)
}
